// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NutricareApp.Data;

namespace NutricareApp.Data.Migrations
{
    [DbContext(typeof(DbContextNutricareApp))]
    partial class DbContextNutricareAppModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NutricareApp.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("appointment_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("DateTime")
                        .HasColumnName("appointment_date");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("client_id");

                    b.Property<int>("DietId")
                        .HasColumnType("int")
                        .HasColumnName("diet_id");

                    b.Property<int>("NutritionistId")
                        .HasColumnType("int")
                        .HasColumnName("nutritionist_id");

                    b.Property<string>("NutritionistNotes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("nutritionist_notes");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DietId");

                    b.HasIndex("NutritionistId");

                    b.ToTable("appointment");
                });

            modelBuilder.Entity("NutricareApp.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("client_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("char(60)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("username");

                    b.HasKey("ClientId");

                    b.ToTable("client");
                });

            modelBuilder.Entity("NutricareApp.Entities.ClientRecipe", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("ClientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("client_recipe");
                });

            modelBuilder.Entity("NutricareApp.Entities.Diet", b =>
                {
                    b.Property<int>("DietId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("diet_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("created_at");

                    b.Property<string>("DietDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("DietName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("DietId");

                    b.ToTable("diet");
                });

            modelBuilder.Entity("NutricareApp.Entities.DietRecipe", b =>
                {
                    b.Property<int>("DietId")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("DietId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("diet_recipe");
                });

            modelBuilder.Entity("NutricareApp.Entities.Nutritionist", b =>
                {
                    b.Property<int>("NutritionistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("nutritionist_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CnpNumber")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("int")
                        .HasColumnName("cnp_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("lastname");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("char(60)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("username");

                    b.HasKey("NutritionistId");

                    b.ToTable("nutritionist");
                });

            modelBuilder.Entity("NutricareApp.Entities.Professionalprofile", b =>
                {
                    b.Property<int>("ProfessionalprofileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("professional_profile_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NutritionistId")
                        .HasColumnType("int");

                    b.Property<string>("ProfessionalExperienceDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("professional_experience_description");

                    b.HasKey("ProfessionalprofileId");

                    b.HasIndex("NutritionistId")
                        .IsUnique();

                    b.ToTable("professional_profile");
                });

            modelBuilder.Entity("NutricareApp.Entities.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("created_At");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<int>("Favorite")
                        .HasColumnType("int")
                        .HasColumnName("favorite");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("ingredients");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("DateTime")
                        .HasColumnName("last_modification");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("NutritionistId")
                        .HasColumnType("int")
                        .HasColumnName("nutritionist_id");

                    b.Property<string>("Preparation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("preparation");

                    b.HasKey("RecipeId");

                    b.HasIndex("NutritionistId");

                    b.ToTable("recipe");
                });

            modelBuilder.Entity("NutricareApp.Entities.Recommendation", b =>
                {
                    b.Property<int>("RecommendationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("recommendation_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModification")
                        .HasColumnType("DateTime")
                        .HasColumnName("last_modification");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("NutritionistId")
                        .HasColumnType("int")
                        .HasColumnName("nutritionist_id");

                    b.HasKey("RecommendationId");

                    b.HasIndex("NutritionistId");

                    b.ToTable("recommendation");
                });

            modelBuilder.Entity("NutricareApp.Entities.Specialty", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("specialty_id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InstitutionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("SpecialtyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("SpecialtyId");

                    b.ToTable("specialty");
                });

            modelBuilder.Entity("NutricareApp.Entities.SpecialtyProfile", b =>
                {
                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalProfileId")
                        .HasColumnType("int");

                    b.HasKey("SpecialtyId", "ProfessionalProfileId");

                    b.HasIndex("ProfessionalProfileId");

                    b.ToTable("specialty_professional_profile");
                });

            modelBuilder.Entity("NutricareApp.Entities.Appointment", b =>
                {
                    b.HasOne("NutricareApp.Entities.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutricareApp.Entities.Diet", "Diet")
                        .WithMany("Appointments")
                        .HasForeignKey("DietId")
                        .HasConstraintName("fk_diet_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutricareApp.Entities.Nutritionist", "Nutritionist")
                        .WithMany("Appointments")
                        .HasForeignKey("NutritionistId")
                        .HasConstraintName("fk_nutritionist_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Diet");

                    b.Navigation("Nutritionist");
                });

            modelBuilder.Entity("NutricareApp.Entities.ClientRecipe", b =>
                {
                    b.HasOne("NutricareApp.Entities.Client", "Client")
                        .WithMany("ClientRecipes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutricareApp.Entities.Recipe", "Recipe")
                        .WithMany("ClientRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NutricareApp.Entities.DietRecipe", b =>
                {
                    b.HasOne("NutricareApp.Entities.Diet", "Diet")
                        .WithMany("DietRecipes")
                        .HasForeignKey("DietId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutricareApp.Entities.Recipe", "Recipe")
                        .WithMany("DietRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("NutricareApp.Entities.Professionalprofile", b =>
                {
                    b.HasOne("NutricareApp.Entities.Nutritionist", "Nutritionist")
                        .WithOne("ProfessionalProfile")
                        .HasForeignKey("NutricareApp.Entities.Professionalprofile", "NutritionistId")
                        .HasConstraintName("fk_nutritionist_profile_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutritionist");
                });

            modelBuilder.Entity("NutricareApp.Entities.Recipe", b =>
                {
                    b.HasOne("NutricareApp.Entities.Nutritionist", "Nutritionist")
                        .WithMany("Recipes")
                        .HasForeignKey("NutritionistId")
                        .HasConstraintName("fk_nutritionist_recipe_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutritionist");
                });

            modelBuilder.Entity("NutricareApp.Entities.Recommendation", b =>
                {
                    b.HasOne("NutricareApp.Entities.Nutritionist", "Nutritionist")
                        .WithMany("Recommendations")
                        .HasForeignKey("NutritionistId")
                        .HasConstraintName("fk_nutritionist_recommendation_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nutritionist");
                });

            modelBuilder.Entity("NutricareApp.Entities.SpecialtyProfile", b =>
                {
                    b.HasOne("NutricareApp.Entities.Professionalprofile", "Professionalprofile")
                        .WithMany("SpecialtyProfiles")
                        .HasForeignKey("ProfessionalProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutricareApp.Entities.Specialty", "Specialty")
                        .WithMany("SpecialtyProfiles")
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professionalprofile");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("NutricareApp.Entities.Client", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ClientRecipes");
                });

            modelBuilder.Entity("NutricareApp.Entities.Diet", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DietRecipes");
                });

            modelBuilder.Entity("NutricareApp.Entities.Nutritionist", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ProfessionalProfile");

                    b.Navigation("Recipes");

                    b.Navigation("Recommendations");
                });

            modelBuilder.Entity("NutricareApp.Entities.Professionalprofile", b =>
                {
                    b.Navigation("SpecialtyProfiles");
                });

            modelBuilder.Entity("NutricareApp.Entities.Recipe", b =>
                {
                    b.Navigation("ClientRecipes");

                    b.Navigation("DietRecipes");
                });

            modelBuilder.Entity("NutricareApp.Entities.Specialty", b =>
                {
                    b.Navigation("SpecialtyProfiles");
                });
#pragma warning restore 612, 618
        }
    }
}
